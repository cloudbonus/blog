plugins {
    id "war"
}

repositories {
    mavenCentral()
}

group = "com.github"
version = "1.0"

ext {
    mapStructVersion = "1.5.5.Final"
    lombokVersion = "1.18.32"
    hibernateVersion = "6.4.4.Final"
    jsonWebtokenVersion = "0.12.5"
}

dependencies {
    //  fix
    implementation "org.apache.commons:commons-compress:1.26.1"
    //  spring
    implementation(platform('org.springframework:spring-framework-bom:6.1.8'))
    implementation(platform('org.springframework.security:spring-security-bom:6.3.0'))
    implementation(platform("org.hibernate.orm:hibernate-platform:${hibernateVersion}"))
    implementation("org.springframework:spring-webmvc")
    implementation("org.springframework.security:spring-security-web")
    implementation("org.springframework.security:spring-security-config")
    implementation("org.springframework:spring-context")
    implementation("org.springframework:spring-orm")
    implementation("org.springframework.statemachine:spring-statemachine-core:4.0.0")
    implementation("org.springframework.statemachine:spring-statemachine-kryo:4.0.0")
    // validator
    implementation("org.passay:passay:1.6.4")
    implementation("org.hibernate.validator:hibernate-validator:8.0.1.Final")
    // etc
    implementation(platform("org.apache.logging.log4j:log4j-bom:2.23.1"))
    implementation(platform('com.fasterxml.jackson:jackson-bom:2.17.1'))
    implementation("io.jsonwebtoken:jjwt-api:${jsonWebtokenVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("org.apache.logging.log4j:log4j-api")
    implementation("org.slf4j:slf4j-api:2.0.13")
    implementation("org.liquibase:liquibase-core:4.27.0")
    implementation("org.mapstruct:mapstruct:${mapStructVersion}")
    implementation("jakarta.persistence:jakarta.persistence-api")
    implementation("org.hibernate.orm:hibernate-core")
    runtimeOnly("org.postgresql:postgresql:42.7.3")
    runtimeOnly("org.apache.logging.log4j:log4j-core")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:${jsonWebtokenVersion}")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:${jsonWebtokenVersion}")
    providedCompile("jakarta.servlet:jakarta.servlet-api:6.0.0")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    compileOnly("org.hibernate.orm:hibernate-jpamodelgen")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor(platform("org.hibernate.orm:hibernate-platform:${hibernateVersion}"))
    annotationProcessor("org.hibernate.orm:hibernate-jpamodelgen")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapStructVersion}")
    //  tests
    testImplementation("org.glassfish.expressly:expressly:5.0.0")
    testImplementation(platform("org.junit:junit-bom:5.10.2"))
    testImplementation(platform('org.testcontainers:testcontainers-bom:1.19.8'))
    testImplementation(platform('org.mockito:mockito-bom:5.12.0'))
    testImplementation("org.apache.logging.log4j:log4j-slf4j2-impl")
    testImplementation("org.springframework:spring-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.mockito:mockito-junit-jupiter")
    testImplementation("org.springframework:spring-test")
    testImplementation("org.assertj:assertj-core:3.25.3")
    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:junit-jupiter")
    testRuntimeOnly("com.jayway.jsonpath:json-path:2.9.0")
    testRuntimeOnly("com.h2database:h2:2.2.224")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging{
        events("passed", "skipped", "failed")
    }
}